{
  ors {
    # The topmost element to provide basic information about the service for signing and information purposes
    info: {
      base_url: "https://go.openrouteservice.org/",
      support_mail: "support@openrouteservice.org",
      author_tag: "openrouteservice",
      content_licence: "Apache License 2.0"
    }
    # The element for parameterization of the ORS end-points such as Routing, Geocoding, Isochrones, etc.
    services: {
      # ********************************************************************************************************************
      #		# An end-point used to shorten links.
      # ********************************************************************************************************************
      shortenlink: {
        # Enables or disables (true/false) the end-point. Default value is true.
        enabled: true,
        user_name: YOUR_USER,
        user_password: YOUR_PASSWORD,
        api_key: YOUR_API_KEY,
      }
      # ********************************************************************************************************************
      # Accessibility API end-point parameters
      # NOTE: not ready for production yet.
      # ********************************************************************************************************************
      accessibility: {
        # Enables or disables (true/false) the end-point. Default value is true.
        enabled: true,
        # Possible values for maximum_range_distance and maximum_range_time are an integer or a list of values specifically defined for each profile.
        maximum_range_distance:
          [
            {profiles: "any", value: 50000}
            {profiles: "driving-car, driving-hgv", value: 100000}
          ],
        maximum_range_time:
          [
            {profiles: "any", value: 18000}
            {profiles: "driving-car, driving-hgv", value: 3600}
          ],
        maximum_locations: 2,
        route_details_allowed: true,
        attribution: "openrouteservice.org, OpenStreetMap contributors"
      }
      # ********************************************************************************************************************
      # Matrix API end-point parameters
      # ********************************************************************************************************************
      matrix: {
        # Enables or disables (true/false) the end-point. Default value is true.
        enabled: true,
        # Maximum dimension of the result matrix. In other words, the maximum possible length of a row or a column in the matrix.
        # Default value is 100.
        maximum_locations: 100,
        # Maximum dimension of the result matrix when using custom profiles that do not support Contraction Hierarchies. Usually everything
        # that is not pure car or hgv profile. Default value is 25.
        maximum_locations_flexible: 25,
        # Maximum allowed distance between the requested coordinate and a point on the nearest road. The value is measured in meters.
        maximum_search_radius: 5000,
        # Maximum allowed number of visited nodes in shortest path computation. This threshold is applied only for Dijkstra algorithm.
        maximum_visited_nodes: 100000,
        # Specifies whether the name of a neares street to the location can be resolved or not. Default value is true.
        allow_resolve_locations: true,
        attribution: "openrouteservice.org, OpenStreetMap contributors"
      }
      # ********************************************************************************************************************
      # Optimization API end-point parameters
      # NOTE: not implemented yet.
      # ********************************************************************************************************************
      optimization: {
        # Enables or disables (true/false) the end-point. Default value is true.
        enabled: true,
        maximum_locations: 200,
        solver_name: "default",
        solver_options:
          {
          },
        attribution: "openrouteservice.org, OpenStreetMap contributors"
      }
      # ********************************************************************************************************************
      # MapMatching API end-point parameters
      # NOTE: not implemented yet.
      # ********************************************************************************************************************
      mapmatching: {
        # Enables or disables (true/false) the end-point. Default value is true.
        enabled: true,
        maximum_locations: 100,
        maximum_search_radius: 200,
        maximum_visited_nodes: 10000,
        attribution: "openrouteservice.org, OpenStreetMap contributors"
      }
      # ********************************************************************************************************************
      # Isochrones API end-point parameters
      # ********************************************************************************************************************
      isochrones: {
        # Enables or disables (true/false) the end-point. Default value is true.
        enabled: true,
        # Possible values for maximum_range_distance and maximum_range_time are an integer or a list of values specifically defined for each profile.
        maximum_range_distance:
          [
            {profiles: "any", value: 50000}
            {profiles: "driving-car, driving-hgv", value: 100000}
          ],
        maximum_range_time:
          [
            {profiles: "any", value: 18000}
            {profiles: "driving-car, driving-hgv", value: 3600}
          ],
        # Maximum number of intervals/isochrones computed for each location.
        maximum_intervals: 10,
        # Maximum number of locations in one request.
        maximum_locations: 2,
        # Speficies whether area computation by setting "attributes=area" is allowed or not.
        allow_compute_area: true,
        # Add your statistics settings here
        statistics_providers:
          {
            provider1: {
              enabled: true,
              provider_name: postgresql,
              provider_parameters: {
                host: "YOUR_HOST",
                port: 5432,
                db_name: "YOUR_DATABASE",
                user: "YOUR_USER",
                password: "YOUR_PASSWORD",
                table_name: "YOUR_TABLE",
                geometry_column: "YOUR_GEOM_COLUMN"
              },
              # The mapping is hardcoded at the moment. See the PostgresSQLStatisticsProvider.class and RoutingProfile.class to adapt to your needs.
              property_mapping: {
                "total_pop": "total_pop", "total_area_km": "total_area_km", "YOUR_MAPPING": "YOUR_MAPPING"
              },
              attribution: "openrouteservice.org, OpenStreetMap contributors"
            }
          }
      }
      # ********************************************************************************************************************
      # Geocoding API end-point parameters
      # ********************************************************************************************************************
      geocoding: {
        # Enables or disables (true/false) the end-point. Default value is true.
        enabled: true,
        # The name of a geocoder. Possible values are nomimatim, pelias or photon.
        geocoder_name: pelias,
        # URL for forward geocoding.
        geocoding_url: "http://YOUR_ADDRESS/v1/search",
        # URL for reverse geocoding.
        reverse_geocoding_url: "http://YOUR_ADDRESS/v1/reverse",
        # The maximum allowed number of returned results.
        response_limit: 20,
        #  Sets the value of the User-agent HTTP header sent to a backend.
        user_agent: OpenRouteService,
        attribution: "openrouteservice.org, OpenStreetMap contributors"
      }
      # ********************************************************************************************************************
      # Routing API end-point parameters
      # ********************************************************************************************************************
      routing: {
        # Enables or disables (true/false) the end-point. Default value is true.
        enabled: true,
        mode: "normal",
        # routing_description and routing_name provide basic information to sign and name routing exports
        routing_description: "This is a routing file from openrouteservice",
        routing_name: "openrouteservice routing",
        # The path to an OpenStreetMap data file.
        # sources: ["openrouteservice/src/main/files/heidelberg.osm.gz"],
        sources: ["openrouteservice/src/main/files/pays-de-la-loire-latest.osm.pbf"],
        # sources: ["openrouteservice/src/main/files/map.osm"],

        # The number of threads used to initialize (build/load) graphs. Higher numbers requires more RAM.
        init_threads: 2,
        attribution: "openrouteservice.org, OpenStreetMap contributors",
        # Defines a set of routing profiles.
        profiles: {
          # Defines a list of active routing profiles. The element name XXX must correspond to a notation "profile-XXX", which is used in the following sections.
          # active: ["car", "hgv", "motorcycle", "bike-regular", "bike-mountain", "bike-road", "bike-safe", "bike-tour" , "bike-electric", "walking", "hiking", "wheelchair"],
          # Set parameters that is applied to every profile by default.
          default_params: {
            # The number of bytes used for FlagEncoders.
            encoder_flags_size: 8,
            # The root path to a directory for storing graphs.
            graphs_root_path: "graphs",
            # The name of an elevation provider. Possible values are multi, cgiar or srtm.
            elevation_provider: multi,
            # The path to a directory in which SRTM tiles will be stored.
            elevation_cache_path: "cgiar_provider",
            # keep elevation data once it has been downloaded
            elevation_cache_clear: false,
            # Specifies whether way names will be stored during the import or not.
            instructions: true,
            # The maximum allowed total distance of a route.
            maximum_distance: 100000,
            # The maximum allowed distance between two way points when dynamic weights are used.
            maximum_segment_distance_with_dynamic_weights: 50000,
            # The maximum number of way points in a request.
            maximum_waypoints: 50,

            # The parameters for the pre-processing stage.
            preparation: {
              min_network_size: 200,
              min_one_way_network_size: 200,

              methods: {
                # Landmarks
                lm: {
                  # Enables or disables landmarks features.
                  enabled: true,
                  # The number of threads used to compute landmarks.
                  threads: 1,
                  # A pipe (|) separated list of weightings used for Landmarks.
                  weightings: "fastest|shortest",
                  # The number of landmarks.
                  landmarks: 16
                }
              }
            }
            # The parameters for the execution stage.
            execution: {
              methods: {
                lm: {
                  disabling_allowed: true,
                  active_landmarks: 8
                }
              }
            }
          },
          # ====================================================================================================================
          # Vehicle profiles
          # ====================================================================================================================
          profile-car: {
            profiles: "driving-car",
            parameters: {
              encoder_flags_size: 8,
              # List of options used by FlagEncoders.
              encoder_options: "turn_costs=true|block_fords=false|use_acceleration=false",
              maximum_distance: 100000,
              elevation: true,
              preparation: {
                min_network_size: 200,
                min_one_way_network_size: 200,

                methods: {
                  ch: {
                    enabled: true,
                    threads: 1,
                    weightings: "fastest"
                  },
                  lm: {
                    enabled: true,
                    threads: 1,
                    weightings: "fastest|shortest",
                    landmarks: 16
                  }
                }
              }
              execution: {
                methods: {
                  # Contraction hierachies
                  ch: {
                    disabling_allowed: true
                  },
                  # Landmarks
                  lm: {
                    disabling_allowed: true,
                    active_landmarks: 8
                  }
                }
              }
              # The list of custom storages that store additional attribtues for graph edges.
              ext_storages: {
                WayCategory: {},
                HeavyVehicle: {},
                WaySurfaceType: {},
                # Borders allows the restriction of routes to not cross country borders
                #
                # Borders {
                #   boundaries: "...",  - The path to a file containing geojson data representing the borders of countries
                #   ids: "...",         - Path to a csv file containing a unique id for each country, its local name and its english name
                #   openborders: "..."  - Path to a csv file contianing pairs of countries where the borders are open (i.e. Schengen borders)
                # },
                # RoadAccessRestrictions are where roads are restricted to certain vehicles to certain circumstances.
                # e.g. access=destination
                RoadAccessRestrictions: {
                # The use_for_warnings parameter tells the ors that this storage can be used for generating warning messages
                # in the route response. For RoadAccessRestrictions, this means that whenever a route goes over a way
                # which has some restrictions, a warning message will be delivered with the response and the roadaccessrestrictions
                # extra info automatically added.
                  use_for_warnings: true
                }
              }
              # Traffic feature is not ready for production.
              traffic: false
            }
          }
          profile-hgv: {
            profiles: "driving-hgv",
            parameters: {
              encoder_flags_size: 8,
              # List of options used by FlagEncoders.
              encoder_options: "turn_costs=true|block_fords=false|use_acceleration=false",
              maximum_distance: 100000,
              elevation: true,
              preparation: {
                min_network_size: 200,
                min_one_way_network_size: 200,

                methods: {
                  ch: {
                    enabled: true,
                    threads: 1,
                    weightings: "fastest"
                  },
                  lm: {
                    enabled: true,
                    threads: 1,
                    weightings: "fastest|shortest",
                    landmarks: 16
                  }
                }
              }
              execution: {
                methods: {
                  # Contraction hierachies
                  ch: {
                    disabling_allowed: true
                  },
                  # Landmarks
                  lm: {
                    disabling_allowed: true,
                    active_landmarks: 8
                  }
                }
              }
              # The list of custom storages that store additional attribtues for graph edges.
              ext_storages: {
                WayCategory: {},
                HeavyVehicle: {
                  restrictions: true
                },
                WaySurfaceType: {},
                # Borders allows the restriction of routes to not cross country borders
                #
                # Borders {
                #   boundaries: "...",  - The path to a file containing geojson data representing the borders of countries
                #   ids: "...",         - Path to a csv file containing a unique id for each country, its local name and its english name
                #   openborders: "..."  - Path to a csv file contianing pairs of countries where the borders are open (i.e. Schengen borders)
                # }
              }
              # Traffic feature is not ready for production.
              traffic: false
            }
          }
          profile-motorcycle: {
            profiles: "driving-motorcycle",
            parameters: {
              encoder_flags_size: 8,
              # List of options used by FlagEncoders.
              encoder_options: "turn_costs=true|block_fords=false|use_acceleration=false",
              maximum_distance: 100000,
              elevation: true,
              preparation: {
                min_network_size: 200,
                min_one_way_network_size: 200,

                methods: {
                  ch: {
                    enabled: true,
                    threads: 1,
                    weightings: "fastest"
                  },
                  lm: {
                    enabled: true,
                    threads: 1,
                    weightings: "fastest|shortest",
                    landmarks: 16
                  }
                }
              }
              execution: {
                methods: {
                  # Contraction hierachies
                  ch: {
                    disabling_allowed: true
                  },
                  # Landmarks
                  lm: {
                    disabling_allowed: true,
                    active_landmarks: 8
                  }
                }
              }
              # The list of custom storages that store additional attribtues for graph edges.
              ext_storages: {
                WayCategory: {},
                HeavyVehicle: {},
                WaySurfaceType: {},
                # Borders allows the restriction of routes to not cross country borders
                #
                # Borders {
                #   boundaries: "...",  - The path to a file containing geojson data representing the borders of countries
                #   ids: "...",         - Path to a csv file containing a unique id for each country, its local name and its english name
                #   openborders: "..."  - Path to a csv file contianing pairs of countries where the borders are open (i.e. Schengen borders)
                # }
              }
              # Traffic feature is not ready for production.
              traffic: false
            }
          }
          # ====================================================================================================================
          # Cycling profiles
          # ====================================================================================================================
          profile-bike-regular: {
            profiles: "cycling-regular",
            parameters: {
              # extent: [5.866240, 15.042050, 47.270210, 55.058140], #
              encoder_options: "consider_elevation=true|turn_costs=true|block_fords=false",
              elevation: true,
              ext_storages: {
                WayCategory: {},
                WaySurfaceType: {},
                HillIndex: {},
                TrailDifficulty: {}
              }
            }
          }
          profile-bike-mountain: {
            profiles: "cycling-mountain",
            parameters: {
              # extent: [5.866240, 15.042050, 47.270210, 55.058140], #
              encoder_options: "consider_elevation=true|turn_costs=true|block_fords=false",
              elevation: true,
              ext_storages: {
                WayCategory: {},
                WaySurfaceType: {},
                HillIndex: {},
                TrailDifficulty: {}
              }
            }
          }
          profile-bike-road: {
            profiles: "cycling-road",
            parameters: {
              # extent: [5.866240, 15.042050, 47.270210, 55.058140], #
              encoder_options: "consider_elevation=true|turn_costs=true|block_fords=false",
              elevation: true,
              ext_storages: {
                WayCategory: {},
                WaySurfaceType: {},
                HillIndex: {},
                TrailDifficulty: {}
              }
            }
          }
          profile-bike-safe: {
            profiles: "cycling-safe",
            parameters: {
              encoder_options: "consider_elevation=true|turn_costs=true|block_fords=false",
              elevation: true,
              ext_storages: {
                WayCategory: {},
                WaySurfaceType: {},
                HillIndex: {},
                TrailDifficulty: {}
              }
            }
          }
          profile-bike-tour: {
            profiles: "cycling-tour",
            parameters: {
              encoder_options: "consider_elevation=true|turn_costs=true|block_fords=false",
              elevation: true,
              ext_storages: {
                WayCategory: {},
                WaySurfaceType: {},
                HillIndex: {},
                TrailDifficulty: {}
              }
            }
          }
          profile-bike-electric: {
            profiles: "cycling-electric",
            parameters: {
              encoder_options: "consider_elevation=true|turn_costs=true|block_fords=false",
              elevation: true,
              ext_storages: {
                WayCategory: {},
                WaySurfaceType: {},
                HillIndex: {},
                TrailDifficulty: {}
              }
            }
          }
          # ====================================================================================================================
          # Walking profiles
          # ====================================================================================================================
          profile-walking: {
            profiles: "foot-walking",
            parameters: {
              encoder_options: "block_fords=false",
              elevation: true,
              ext_storages: {
                #GreenIndex: {
                #    filepath: "PATH/TO/THE_GREEN_INDEX_CSV_FILE"
                #},
                #NoiseIndex: {
                #	 filepath: "PATH/TO/THE_NOISE_INDEX_CSV_FILE"
                #},
                WayCategory: {},
                WaySurfaceType: {},
                HillIndex: {},
                TrailDifficulty: {}
              }
            }
          }
          profile-hiking: {
            profiles: "foot-hiking",
            parameters: {
              encoder_options: "block_fords=false",
              elevation: true,
              ext_storages: {
                #GreenIndex: {
                #    filepath: "PATH/TO/THE_GREEN_INDEX_CSV_FILE"
                #},
                #NoiseIndex: {
                #	 filepath: "PATH/TO/THE_NOISE_INDEX_CSV_FILE"
                #},
                WayCategory: {},
                WaySurfaceType: {},
                HillIndex: {},
                TrailDifficulty: {}
              }
            }
          }
          # ====================================================================================================================
          # Wheelchair profiles
          # ====================================================================================================================
          profile-wheelchair: {
            profiles: "wheelchair",
            parameters: {
              encoder_options: "block_fords=true",
              elevation: true,
              ext_storages: {
                WayCategory: {},
                WaySurfaceType: {},
                Wheelchair: {
                  # The KerbsOnCrossings option tells the builder whether kerb heights should only be attached to ways
                  # marked as crossings ("true"), or to any way they fall on ("false")
                  KerbsOnCrossings: "true"
                },
                OsmId: {}   # Allow the returning of som ids of ways in extra info
              }
            }
          }
        }
        update: {
          enabled: false,
          time: "5, 10:10:00, 100000",
          source: "URL/TO/**.osm.pbf",
          extent: "",
          working_directory: "./update_graphs"
        }
        traffic: {
          enabled: false,
          source: "type=ftp;server=YOUR_SERVER;user=YOUR_USER;password=YOUR_PASSWORD;file=TMC_FILE",
          location_codes_path: "PATH/TO/TMC_LCL_LIST",
          update_interval: 300000,
          output_directory: "Temp"
        }
      }
    }
    # Logging configuration
    logging: {
      # Enables or disables logging. Default value is true.
      enabled: true,
      # The path to a file containing logging parameters.
      level_file: "DEBUG_LOGGING.json",
      # The path to a directory to which logs will be written.
      location: "./logs",
      # Enables/disables writing logs to STDOUT.
      stdout: true
    }
  }
}